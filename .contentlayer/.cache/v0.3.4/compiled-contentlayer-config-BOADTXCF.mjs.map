{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files'\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\nimport rehypeSlug from 'rehype-slug'\nimport remarkGfm from 'remark-gfm'\n\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: `posts/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    abstract: { type: 'string', required: true },\n    publishedOn: { type: 'string', required: true },\n    // author: { type: 'string', required: false },\n    // brief: { type: 'string', required: false },\n    // heroImage: { type: 'string', required: false },\n    // readTimeInMinutes: { type: 'number', required: false },\n    // createdAt: { type: 'date', required: false },\n    // updatedAt: { type: 'date', required: false },\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: (post) => {\n        const parts = post._raw.flattenedPath.split('/')\n        return parts[parts.length - 1]\n      },\n    },\n    url: {\n      type: 'string',\n      resolve: (post) => {\n        const parts = post._raw.flattenedPath.split('/')\n        const slug = parts[parts.length - 1]\n        return `/blog/${slug}`\n      },\n    },\n  },\n}))\n\nexport default makeSource({\n  contentDirPath: 'content',\n  documentTypes: [Post],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      rehypeSlug,\n      // [\n      //   rehypePrettyCode,\n      //   {\n      //     theme: \"github-dark\",\n      //     onVisitLine(node) {\n      //       // Prevent lines from collapsing in `display: grid` mode, and allow empty\n      //       // lines to be copy/pasted\n      //       if (node.children.length === 0) {\n      //         node.children = [{ type: \"text\", value: \" \" }]\n      //       }\n      //     },\n      //     onVisitHighlightedLine(node) {\n      //       node.properties.className.push(\"line--highlighted\")\n      //     },\n      //     onVisitHighlightedWord(node) {\n      //       node.properties.className = [\"word--highlighted\"]\n      //     },\n      //   },\n      // ],\n      [\n        rehypeAutolinkHeadings,\n        {\n          properties: {\n            className: ['subheading-anchor'],\n            ariaLabel: 'Link to section',\n          },\n        },\n      ],\n    ],\n  },\n})\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,4BAA4B;AACnC,OAAO,gBAAgB;AACvB,OAAO,eAAe;AAEf,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,UAAU,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC3C,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOhD;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,SAAS;AACjB,cAAM,QAAQ,KAAK,KAAK,cAAc,MAAM,GAAG;AAC/C,eAAO,MAAM,MAAM,SAAS,CAAC;AAAA,MAC/B;AAAA,IACF;AAAA,IACA,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,SAAS;AACjB,cAAM,QAAQ,KAAK,KAAK,cAAc,MAAM,GAAG;AAC/C,cAAM,OAAO,MAAM,MAAM,SAAS,CAAC;AACnC,eAAO,SAAS,IAAI;AAAA,MACtB;AAAA,IACF;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACH,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe;AAAA,MACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAoBA;AAAA,QACE;AAAA,QACA;AAAA,UACE,YAAY;AAAA,YACV,WAAW,CAAC,mBAAmB;AAAA,YAC/B,WAAW;AAAA,UACb;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,CAAC;",
  "names": []
}
